# -*- coding: utf-8 -*-
"""SIH_chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zkcZKpSKCdbqaE4zK7VtMtJgEEBdQnkK
"""
from flask import Flask, render_template, request, jsonify
from transformers import AutoTokenizer, TFAutoModelForQuestionAnswering
import tensorflow as tf
from flask_cors import CORS  # Import CORS
app = Flask(__name__, static_url_path='/static')
tokenizer = AutoTokenizer.from_pretrained("bert-large-uncased-whole-word-masking-finetuned-squad")
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-large-uncased-whole-word-masking-finetuned-squad")

# Render the HTML page when accessing the root URL
@app.route('/')
def index():
    return render_template('index.html')

context = "GreenIQ is a web application developed by Team Cyber Elites.The user can sign up using their email and password as student or mentor. After logging in, the user is taken to the Home Page. After that, the user has to visit the Dashboard to avail the services. The options available in the dashboard are as follows: Virtual Mentor, Courses, Tests, Reports, Home (to revert back to the home page), LeaderBoard, News Feed, Discuss, Materials, Profile, Settings, Create Material (for mentors). Virtual Mentor solve any query that the user may have. The user can also improve their communication skills by interacting with the virtual mentor. The user has to send their query to the assistant and the assistant will answer that. The 'Courses' tab offers additional learning choices for competitive exams such as olympiads. The 'Tests' tab features mentor-created tests for various subjects. The 'Reports' tab offers personalized reports for the users generated from the test results on the basis of obtained scores. 'LeaderBoard' tab provides a gamified learning experience by assigning ranks among peers. 'News Feed' tab provides information regarding employment opportunities, scholarships, grants, internships, Research Development and entrance tests. The 'Discuss' Forum is there to raise doubts and encourage discussion among peers and mentors. 'Materials' tab provides class-wise and subject-wise study material within curriculum. The 'Profile' tab is for viewing the User's Profile and viewing progress and saved material. 'Settings' tab is editing settings. The 'Create Material' tab is reserved for mentors for creating subject-wise, class-wise material and assigning them to students. The 'Book a call' tab enables students to book 1:1 calls with mentors for a limited period and solve their doubts. The mentor will have to confirm the meeting for the student to attend it, Otherwise they have to try for a different session."
CORS(app, resources={r"/predict": {"origins": "http://localhost:5173"}})

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Get the form data from the request
        q = request.form['question']
        print(f'Received question: {q}')  # Add this line
        inputs = tokenizer(q, context, add_special_tokens=True, return_tensors="tf")
        input_ids = inputs["input_ids"].numpy()[0]

        outputs = model(inputs)
        answer_start_score = outputs.start_logits
        answer_end_score = outputs.end_logits

        answer_start = tf.argmax(answer_start_score, axis=1).numpy()[0]
        answer_end = (tf.argmax(answer_end_score, axis=1) + 1).numpy()[0]

        answer = tokenizer.convert_tokens_to_string(tokenizer.convert_ids_to_tokens(input_ids[answer_start:answer_end]))
        return jsonify({'answer': answer})
    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    app.run(debug=True)



